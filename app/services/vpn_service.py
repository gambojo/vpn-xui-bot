import logging
import uuid
import qrcode
import os
from datetime import datetime, timedelta
from py3xui import AsyncApi, Client
from app.config import XUI_PANEL_URL, XUI_USERNAME, XUI_PASSWORD, INBOUND_ID, \
    DATA_LIMIT_GB, EXPIRY_TIME, XUI_EXTERNAL_IP, SERVER_PORT, QRCODE_DIR

logger = logging.getLogger(__name__)


# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
def get_expiry_time(expiry_days):
    """–ü—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Å–ª—è–µ—Ç expiry_time –≤ ms"""
    if expiry_days != 0:
        expire_dt = datetime.now() + timedelta(days=expiry_days)
        return int(expire_dt.timestamp() * 1000)
    return 0


def get_total_gb(total_gb):
    """–ü—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö"""
    if total_gb != 0:
        return 1000 * 1024 * 1024 * total_gb
    return 0


def get_expiry_date(expire_ms):
    """–ü—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏"""
    if expire_ms == 0:
        return "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
    now_ms = int(datetime.now().timestamp() * 1000)
    delta_ms = expire_ms - now_ms
    return max(delta_ms // (1000 * 60 * 60 * 24), 0)


def get_connection_string(email, inbound, client_uuid):
    """–ü—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    public_key = inbound.stream_settings.reality_settings.get("settings").get("publicKey")
    website_name = inbound.stream_settings.reality_settings.get("serverNames")[0]
    short_id = inbound.stream_settings.reality_settings.get("shortIds")[0]
    remark = inbound.remark

    connection_string = (
        f"vless://{client_uuid}@{XUI_EXTERNAL_IP}:{SERVER_PORT}"
        f"?type=tcp&security=reality&pbk={public_key}&fp=firefox&sni={website_name}"
        f"&sid={short_id}&spx=%2F#{remark}-{email}"
    )
    return connection_string


def create_qrcode(connection_string, email):
    """–ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥"""
    os.makedirs(QRCODE_DIR, exist_ok=True)
    qrcode_path = os.path.join(QRCODE_DIR, f"{email}.png")
    img = qrcode.make(connection_string)
    img.save(qrcode_path)
    return qrcode_path


# üîÑ –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° API
async def api_connect():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
    try:
        api = AsyncApi(XUI_PANEL_URL, XUI_USERNAME, XUI_PASSWORD)
        await api.login()
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3x-ui")
        return api
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ 3x-ui: {e}")
        return None


async def get_inbound(api, inbound_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–±–∞—É–Ω–¥–∞"""
    try:
        inbound = await api.inbound.get_by_id(inbound_id)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω–±–∞—É–Ω–¥–µ")
        return inbound
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω–±–∞—É–Ω–¥–µ: {e}")
        return None


async def get_client_by_email(api, email):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email"""
    try:
        client = await api.client.get_by_email(email)
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {email} –Ω–∞–π–¥–µ–Ω")
        return client
    except Exception as e:
        logger.info(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç–∞ {email} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        return None


async def add_client(api, email, inbound_id, expiry_time, total_gb):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        new_client = Client(
            id=str(uuid.uuid4()),
            email=email,
            enable=True,
            flow="xtls-rprx-vision",
            expiry_time=expiry_time,
            total_gb=total_gb
        )
        client = await api.client.add(inbound_id, [new_client])
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {email} –¥–æ–±–∞–≤–ª–µ–Ω")
        return client
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None


async def get_client_from_inbound(inbound, email):
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∏–Ω–±–∞—É–Ω–¥–µ –ø–æ email"""
    try:
        client = None
        for c in inbound.settings.clients:
            if c.email == email:
                client = c
                break
        if client:
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç —Å ID: {client.id}")
        else:
            raise ValueError(f"–ö–ª–∏–µ–Ω—Ç —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–±–∞—É–Ω–¥–µ")
        return client
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∏–Ω–±–∞—É–Ω–¥–∞: {e}")
        return None


async def update_client(api, email, expiry_time, total_gb):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
        client_by_email = await api.client.get_by_email(email)
        if not client_by_email:
            raise ValueError(f"–ö–ª–∏–µ–Ω—Ç {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º inbound —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ UUID –∫–ª–∏–µ–Ω—Ç–∞
        inbound = await get_inbound(api, INBOUND_ID)
        client_in_inbound = await get_client_from_inbound(inbound, email)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        client_by_email.total_gb = total_gb
        client_by_email.expiry_time = expiry_time
        client_by_email.id = client_in_inbound.id  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID

        await api.client.update(client_by_email.id, client_by_email)
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {email} –æ–±–Ω–æ–≤–ª–µ–Ω")
        return client_by_email
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None


# ‚≠ê‚≠ê –¢–û–ß–ö–ò –í–•–û–î–ê ‚≠ê‚≠ê
async def create_vpn_account(telegram_id: int):
    """–¢–û–ß–ö–ê –í–•–û–î–ê - —Å–æ–∑–¥–∞—Ç—å VPN –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        email = str(telegram_id)
        expiry_time = get_expiry_time(EXPIRY_TIME)
        total_gb = get_total_gb(DATA_LIMIT_GB)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
        api = await api_connect()
        if not api:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        existing_client = await get_client_by_email(api, email)
        if existing_client:
            logger.info(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = await add_client(api, email, INBOUND_ID, expiry_time, total_gb)
        if not client:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        inbound = await get_inbound(api, INBOUND_ID)
        client_in_inbound = await get_client_from_inbound(inbound, email)

        connection_string = get_connection_string(email, inbound, client_in_inbound.id)
        qrcode_path = create_qrcode(connection_string, email)

        return {
            "success": True,
            "client_id": client_in_inbound.id,
            "lease_is_active": True,
            "qrcode_path": qrcode_path,
            "expiry_time": expiry_time,
            "expiry_days": EXPIRY_TIME,
            "connection_string": connection_string
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None


async def get_vpn_status(telegram_id: int):
    """–¢–û–ß–ö–ê –í–•–û–î–ê - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å VPN"""
    try:
        email = str(telegram_id)

        api = await api_connect()
        if not api:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = await get_client_by_email(api, email)
        if not client:
            return None

        # –ü–æ–ª—É—á–∞–µ–º inbound –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        inbound = await get_inbound(api, INBOUND_ID)
        client_in_inbound = await get_client_from_inbound(inbound, email)

        expiry_days = get_expiry_date(client.expiry_time)

        return {
            "success": True,
            "client_id": client_in_inbound.id,
            "lease_is_active": client.enable,
            "expiry_days": expiry_days
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ VPN: {e}")
        return None


async def renew_vpn_account(telegram_id: int):
    """–¢–û–ß–ö–ê –í–•–û–î–ê - –ø—Ä–æ–¥–ª–∏—Ç—å VPN –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        email = str(telegram_id)
        expiry_time = get_expiry_time(EXPIRY_TIME)
        total_gb = get_total_gb(DATA_LIMIT_GB)

        api = await api_connect()
        if not api:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = await get_client_by_email(api, email)
        if not client:
            logger.info(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            return None

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        updated_client = await update_client(api, email, expiry_time, total_gb)
        if not updated_client:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        inbound = await get_inbound(api, INBOUND_ID)
        client_in_inbound = await get_client_from_inbound(inbound, email)

        connection_string = get_connection_string(email, inbound, client_in_inbound.id)
        qrcode_path = create_qrcode(connection_string, email)

        return {
            "success": True,
            "client_id": updated_client.id,
            "lease_is_active": updated_client.enable,
            "qrcode_path": qrcode_path,
            "expiry_time": expiry_time,
            "expiry_days": EXPIRY_TIME,
            "connection_string": connection_string
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None



# –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
'''
from vpn_service import create_vpn_account, get_vpn_status

# –°–æ–∑–¥–∞—Ç—å VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
result = await create_vpn_account(123456)
if result:
    print(f"VPN —Å–æ–∑–¥–∞–Ω: {result['connection_string']}")

# –û–±–Ω–æ–≤–∏—Ç—å VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
result = await renew_vpn_account(123456)
if result:
    print(f"VPN —Å–æ–∑–¥–∞–Ω: {result['connection_string']}")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
status = await get_vpn_status(123456)
if status:
    print(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status['expiry_days']}")
'''
