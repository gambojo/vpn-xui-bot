import logging
from typing import Dict

from services.database import save_user, get_user, update_user_balance, \
    get_trial_status, mark_trial_used, get_connection_string
from services.vpn_service import create_vpn_account, get_vpn_status, renew_vpn_account
from services.payment import create_payment, check_payment, is_payment_enabled, get_available_providers, \
    create_payment_config, \
    create_payment_item
from services.onboarding import onboarding_service
from config import PAYMENT_AMOUNT, EXPIRY_TIME, TRIAL_ENABLED, TRIAL_DAYS

logger = logging.getLogger(__name__)


class ActionService:
    """
    üéØ –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –°–ï–†–í–ò–° –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò
    –°–æ–¥–µ—Ä–∂–∏—Ç –í–°–Æ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–±–æ—Ç—ã —Å API
    –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.handlers
    """

    def __init__(self):
        # ‚ö†Ô∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê
        pass

    async def handle_get_vpn(self, telegram_id: int, username: str = None) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ VPN —É—Å–ª—É–≥–∏ - –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú –ü–ï–†–ï–ó–ê–ü–ò–°–ò
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if username:
                await save_user(telegram_id, username)

            # üîÑ –ó–ê–ü–£–°–ö ONBOARDING –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú VPN
            onboarding_result = await onboarding_service.execute_steps(telegram_id)
            if not onboarding_result["completed"]:
                return {
                    "type": "onboarding_required",
                    "message": onboarding_result["message"],
                    "next_action": onboarding_result["next_action"]
                }

            # üî¥ –î–û–ë–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            existing_vpn = await get_vpn_status(telegram_id)
            if existing_vpn and existing_vpn.get("success") and existing_vpn.get("lease_is_active"):
                return {
                    "type": "confirmation_required",
                    "message": (
                        "‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
                        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {existing_vpn['expiry_days']}\n\n"
                        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ <b>–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç</b> —Ç–µ–∫—É—â—É—é.\n"
                        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
                    ),
                    "existing_days": existing_vpn['expiry_days']
                }

            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã
            if is_payment_enabled():
                return {
                    "type": "payment_required",
                    "message": "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN",
                    "providers": get_available_providers()
                }

            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º VPN
            result = await create_vpn_account(telegram_id)
            if result and result.get("success"):
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                await update_user_balance(telegram_id, 5)

                return {
                    "type": "success",
                    "message": (
                        f"‚úÖ <b>VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
                        f"‚Ä¢ –°—Ä–æ–∫: {result['expiry_days']} –¥–Ω–µ–π\n"
                        f"‚Ä¢ ID: {telegram_id}\n"
                        f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: <code>{result['connection_string']}</code>"
                    ),
                    "qrcode_buffer": result.get('qrcode_buffer')
                }
            else:
                return {
                    "type": "error",
                    "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN —Å–µ—Ä–≤–∏—Å–∞"
            }

    async def handle_renew_vpn(self, telegram_id: int) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN —É—Å–ª—É–≥–∏ - –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î
        """
        try:
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã
            if is_payment_enabled():
                return {
                    "type": "payment_required",
                    "message": "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN",
                    "providers": get_available_providers()
                }

            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —Å—Ä–∞–∑—É –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º VPN
            result = await renew_vpn_account(telegram_id)
            if result and result.get("success"):
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                await update_user_balance(telegram_id, 3)

                return {
                    "type": "success",
                    "message": (
                        f"‚úÖ <b>VPN –ø—Ä–æ–¥–ª–µ–Ω!</b>\n"
                        f"‚Ä¢ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {EXPIRY_TIME} –¥–Ω–µ–π\n"
                        f"‚Ä¢ ID: {telegram_id}\n"
                        f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: <code>{result['connection_string']}</code>"
                    ),
                    "qrcode_buffer": result.get('qrcode_buffer')
                }
            else:
                return {
                    "type": "error",
                    "message": (
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å VPN.\n"
                        "–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ ¬´–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É¬ª"
                    )
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ VPN"
            }

    async def handle_free_trial(self, telegram_id: int, username: str = None) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π trial –ø–µ—Ä–∏–æ–¥ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ trial
            if not TRIAL_ENABLED:
                return {
                    "type": "error",
                    "message": "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ trial
            trial_used = await get_trial_status(telegram_id)
            if trial_used:
                return {
                    "type": "error",
                    "message": (
                        "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
                        "üí≥ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
                    )
                }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if username:
                await save_user(telegram_id, username)

            # üîÑ –ó–ê–ü–£–°–ö ONBOARDING –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú VPN
            onboarding_result = await onboarding_service.execute_steps(telegram_id)
            if not onboarding_result["completed"]:
                return {
                    "type": "onboarding_required",
                    "message": onboarding_result["message"],
                    "next_action": onboarding_result["next_action"]
                }

            # –°–æ–∑–¥–∞–µ–º VPN –Ω–∞ trial –ø–µ—Ä–∏–æ–¥
            result = await create_vpn_account(telegram_id, is_trial=True)

            # üî¥ –£–õ–£–ß–®–ï–ù–ò–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è trial VPN: {result}")

            if result and result.get("success"):
                # –û—Ç–º–µ—á–∞–µ–º trial –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                await mark_trial_used(telegram_id)

                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é trial
                await update_user_balance(telegram_id, 5)

                return {
                    "type": "success",
                    "message": (
                        f"üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
                        f"‚Ä¢ –°—Ä–æ–∫: {result['expiry_days']} –¥–Ω–µ–π\n"
                        f"‚Ä¢ ID: {telegram_id}\n"
                        f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: <code>{result['connection_string']}</code>\n\n"
                        f"üí° –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è trial –ø–µ—Ä–∏–æ–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                    ),
                    "qrcode_buffer": result.get('qrcode_buffer')
                }
            else:
                # üî¥ –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_detail = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if result else "VPN —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è trial: {error_detail}")
                return {
                    "type": "error",
                    "message": (
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {error_detail}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                    )
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ trial: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
            }


    async def handle_get_connection(self, telegram_id: int) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.handle_get_connection()
        –í–•–û–î: telegram_id
        –í–´–•–û–î: {type: str, message: str, qrcode_buffer: BytesIO}
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ VPN
            existing_vpn = await get_vpn_status(telegram_id)
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VPN —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {telegram_id}: {existing_vpn}")

            if not existing_vpn or not existing_vpn.get("success"):
                return {
                    "type": "error",
                    "message": (
                        "‚ùå <b>VPN –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
                        "‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ ¬´üõí –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
                    )
                }

            # –ü–æ–ª—É—á–∞–µ–º connection_string –∏–∑ –ë–î
            connection_string = await get_connection_string(telegram_id)
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω connection_string –∏–∑ –ë–î: {connection_string is not None}")

            if not connection_string:
                return {
                    "type": "error",
                    "message": (
                        "‚ùå <b>–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n"
                        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ ¬´üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
                    )
                }

            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            from services.vpn_service import create_qrcode
            qrcode_buffer = create_qrcode(connection_string, str(telegram_id))

            return {
                "type": "success",
                "message": (
                    f"üì± <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n"
                    f"‚Ä¢ ID: {telegram_id}\n"
                    f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
                    f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {existing_vpn['expiry_days']}\n\n"
                    f"üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>\n"
                    f"<code>{connection_string}</code>"
                ),
                "qrcode_buffer": qrcode_buffer
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            }


    async def handle_vpn_status(self, telegram_id: int) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN
        –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.handle_status()
        –í–•–û–î: telegram_id
        –í–´–•–û–î: {type: str, message: str}
        """
        try:
            result = await get_vpn_status(telegram_id)

            if result and result.get("success"):
                status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if result["lease_is_active"] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                return {
                    "type": "success",
                    "message": (
                        f"üìä <b>–°—Ç–∞—Ç—É—Å VPN</b>\n"
                        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}\n"
                        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {result['expiry_days']}\n"
                        f"‚Ä¢ ID: {telegram_id}"
                    )
                }
            else:
                return {
                    "type": "success",
                    "message": (
                        f"üìä <b>–°—Ç–∞—Ç—É—Å VPN</b>\n"
                        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
                        f"‚Ä¢ VPN –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                        f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É¬ª"
                    )
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ VPN: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ VPN"
            }

    async def handle_user_profile(self, telegram_id: int) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.cmd_profile()
        –í–•–û–î: telegram_id
        –í–´–•–û–î: {type: str, message: str}
        """
        try:
            user = await get_user(telegram_id)

            if user:
                profile_text = (
                    f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                    f"‚Ä¢ ID: {user['telegram_id']}\n"
                    f"‚Ä¢ –ò–º—è: {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"‚Ä¢ Email: {user['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user['balance']} –±–∞–ª–ª–æ–≤"
                )
                return {
                    "type": "success",
                    "message": profile_text
                }
            else:
                return {
                    "type": "error",
                    "message": "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
            }

    async def handle_user_balance(self, telegram_id: int) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤
        –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.handle_balance()
        –í–•–û–î: telegram_id
        –í–´–•–û–î: {type: str, message: str}
        """
        try:
            user = await get_user(telegram_id)
            balance = user['balance'] if user else 0

            return {
                "type": "success",
                "message": (
                    f"üèÜ <b>–í–∞—à–∏ –±–∞–ª–ª—ã</b>\n"
                    f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤\n"
                    f"‚Ä¢ 100 –±–∞–ª–ª–æ–≤ = 1 —Ä—É–±–ª—å —Å–∫–∏–¥–∫–∏\n\n"
                    f"üí° –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞:\n"
                    f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ\n"
                    f"‚Ä¢ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
                )
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"
            }

    async def handle_create_payment(self, telegram_id: int, provider: str, action: str) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.handle_payment_method()
        –í–•–û–î: telegram_id, provider, action
        –í–´–•–û–î: {type: str, message: str, payment_id: str, ...}
        """
        try:
            config = create_payment_config(
                amount=PAYMENT_AMOUNT,
                description="VPN –ø–æ–¥–ø–∏—Å–∫–∞" if action == "create_vpn" else "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –ø–æ–¥–ø–∏—Å–∫–∏",
                success_url=f"https://t.me/your_bot?start=payment_success_{telegram_id}",
                fail_url=f"https://t.me/your_bot?start=payment_fail_{telegram_id}",
                items=[create_payment_item("VPN –ø–æ–¥–ø–∏—Å–∫–∞", PAYMENT_AMOUNT)],
                metadata={"action": action, "telegram_id": telegram_id}
            )

            user_data = {
                "telegram_id": telegram_id,
                "username": "user"  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞
            }

            payment = await create_payment(provider, config, user_data)

            if payment:
                return {
                    "type": "payment_created",
                    "message": (
                        f"üí≥ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</b>\n"
                        f"‚Ä¢ –°—É–º–º–∞: {PAYMENT_AMOUNT} —Ä—É–±\n"
                        f"‚Ä¢ –°–ø–æ—Å–æ–±: {payment['provider_name']}\n"
                        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {payment['confirmation_url']}\n\n"
                        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª"
                    ),
                    "payment_id": payment['payment_id'],
                    "provider": provider,
                    "action": action
                }
            else:
                return {
                    "type": "error",
                    "message": "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"
            }

    async def handle_check_payment(self, payment_id: str, provider: str, action: str, telegram_id: int) -> Dict:
        """
        üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        –í–´–ó–´–í–ê–ï–¢–°–Ø –ò–ó: handlers.handle_payment_confirmation()
        –í–•–û–î: payment_id, provider, action, telegram_id
        –í–´–•–û–î: {type: str, message: str}
        """
        try:
            if await check_payment(payment_id, provider):
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if action == "create_vpn":
                    vpn_result = await create_vpn_account(telegram_id)
                elif action == "renew_vpn":
                    vpn_result = await renew_vpn_account(telegram_id)
                else:
                    vpn_result = None

                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –æ–ø–ª–∞—Ç—É
                await update_user_balance(telegram_id, 10)

                if vpn_result and vpn_result.get("success"):
                    return {
                        "type": "success",
                        "message": "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! VPN —É—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
                    }
                else:
                    return {
                        "type": "success",
                        "message": "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏."
                    }
            else:
                return {
                    "type": "error",
                    "message": "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
            }


# =============================================
# üéØ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# =============================================
action_service = ActionService()

# =============================================
# üìã –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ü–û –¢–û–ß–ö–ê–ú –í–•–û–î–ê ACTION SERVICE
# =============================================
"""
üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê ACTION SERVICE:

üìç –û–°–ù–û–í–ù–´–ï –¢–û–ß–ö–ò –í–•–û–î–ê:

1. handle_get_vpn(telegram_id, username=None)
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π VPN –ø–æ–¥–ø–∏—Å–∫–∏
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.vpn_service.create_vpn_account()
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message, qrcode_path}

2. handle_renew_vpn(telegram_id) 
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π VPN –ø–æ–¥–ø–∏—Å–∫–∏
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.vpn_service.renew_vpn_account()
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message}

3. handle_vpn_status(telegram_id)
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∏
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.vpn_service.get_vpn_status() 
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message}

4. handle_user_profile(telegram_id)
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.database.get_user()
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message}

5. handle_user_balance(telegram_id)
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.database.get_user()
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message}

6. handle_create_payment(telegram_id, provider, action)
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.payment.create_payment()
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message, payment_id, provider, action}

7. handle_check_payment(payment_id, provider, action, telegram_id)
   ‚Ä¢ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
   ‚Ä¢ –ò–°–ü–û–õ–¨–ó–£–ï–¢: services.payment.check_payment()
   ‚Ä¢ –í–û–ó–í–†–ê–©–ê–ï–¢: {type, message}

üîÑ –¢–ò–ü–´ –í–û–ó–í–†–ê–©–ê–ï–ú–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:
‚Ä¢ "success" - –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
‚Ä¢ "error" - –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
‚Ä¢ "payment_required" - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞
‚Ä¢ "onboarding_required" - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ onboarding

üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° ONBOARDING:
‚Ä¢ handle_get_vpn() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç onboarding
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–≥–æ–≤ –≤ services.onboarding.py
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""
