services:
  postgres:
    image: postgres:15
    container_name: vpn_bot_postgres
    environment:
      POSTGRES_DB: xui_bot_db
      POSTGRES_USER: xui_bot_user
      POSTGRES_PASSWORD: xui_bot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - vpn_bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d xui_bot_db -U xui_bot_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build: .
    container_name: vpn_bot
    environment:
      BOT_TOKEN: "8266665197:AAH6lfkxr1p-TLbhe3NR_9yErnh5necNW1g"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: xui_bot_db
      DB_USER: xui_bot_user
      DB_PASSWORD: xui_bot_password
      XUI_PANEL_URL: http://localhost:2053
      XUI_USERNAME: admin
      XUI_PASSWORD: admin
      INBOUND_ID: 1
      XUI_EXTERNAL_IP: 193.32.177.130
      DATA_LIMIT_GB: 0
      EXPIRY_TIME: 30
      SERVER_PORT: 443
      COLLECT_EMAIL: false
      COLLECT_PHONE: false
      COLLECT_FIRST_NAME: false
      COLLECT_LAST_NAME: false
      COLLECT_PATRONYMIC: false
      PAYMENT_ENABLED: false
      TRIAL_ENABLED: true
      TRIAL_DAYS: 3
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vpn_bot_network

  adminer:
    image: adminer
    container_name: vpn_bot_adminer
    ports:
      - "8080:8080"
    networks:
      - vpn_bot_network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local

networks:
  vpn_bot_network:
    driver: bridge