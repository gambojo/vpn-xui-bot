import asyncpg
import logging
from config import DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT

logger = logging.getLogger(__name__)


# üîß –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
async def get_connection():
    """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    return await asyncpg.connect(
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME
    )


async def init_database():
    """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        conn = await get_connection()

        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                telegram_id BIGINT PRIMARY KEY,
                username VARCHAR(100),           -- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                display_name VARCHAR(100),       -- –ù–û–í–û–ï: –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram
                email VARCHAR(255),              -- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                phone_number VARCHAR(20),        -- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ  
                first_name VARCHAR(100),         -- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                last_name VARCHAR(100),          -- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                patronymic VARCHAR(100),         -- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                balance INTEGER DEFAULT 0,       -- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
                trial_used BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

                -- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                metadata JSONB DEFAULT '{}'      -- –ù–û–í–û–ï: –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            )
        ''')

        await conn.close()
        logger.info("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False


# üë§ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
async def save_user(telegram_id: int, username: str = None, display_name: str = None, **fields):
    """
    –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    """
    try:
        conn = await get_connection()

        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è + –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        all_fields = {
            'username': username,
            'display_name': display_name,
            'email': fields.get('email'),
            'phone_number': fields.get('phone_number'),
            'first_name': fields.get('first_name'),
            'last_name': fields.get('last_name'),
            'patronymic': fields.get('patronymic'),
            'trial_used': fields.get('trial_used'),  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
            'metadata': fields.get('metadata')
        }

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è (–∫—Ä–æ–º–µ None, –Ω–æ trial_used –º–æ–∂–µ—Ç –±—ã—Ç—å False)
        provided_fields = {}
        for k, v in all_fields.items():
            if v is not None or k == 'trial_used':  # trial_used –º–æ–∂–µ—Ç –±—ã—Ç—å False
                provided_fields[k] = v

        if not provided_fields:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ telegram_id
            await conn.execute(
                'INSERT INTO users (telegram_id) VALUES ($1) ON CONFLICT (telegram_id) DO NOTHING',
                telegram_id
            )
        else:
            # –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—è–º–∏
            insert_fields = ['telegram_id'] + list(provided_fields.keys())
            insert_placeholders = ['$1'] + [f'${i + 2}' for i in range(len(provided_fields))]

            update_parts = [f"{field} = EXCLUDED.{field}" for field in provided_fields.keys()]
            update_parts.append("updated_at = CURRENT_TIMESTAMP")

            values = [telegram_id] + list(provided_fields.values())

            query = f'''
                INSERT INTO users ({", ".join(insert_fields)}) 
                VALUES ({", ".join(insert_placeholders)})
                ON CONFLICT (telegram_id) 
                DO UPDATE SET {", ".join(update_parts)}
            '''

            await conn.execute(query, *values)

        await conn.close()
        logger.info(f"‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


async def get_user(telegram_id: int):
    """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = await get_connection()
        user = await conn.fetchrow(
            'SELECT * FROM users WHERE telegram_id = $1',
            telegram_id
        )
        await conn.close()
        return user
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


async def user_exists(telegram_id: int):
    """–¢–û–ß–ö–ê –í–•–û–î–ê - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(telegram_id)
    return user is not None


async def update_user_balance(telegram_id: int, amount: int):
    """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–±–∞–ª–ª–æ–≤)"""
    try:
        conn = await get_connection()
        await conn.execute(
            'UPDATE users SET balance = balance + $1, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = $2',
            amount, telegram_id
        )
        await conn.close()
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False


async def get_trial_status(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å trial"""
    try:
        conn = await get_connection()
        trial_used = await conn.fetchval(
            'SELECT trial_used FROM users WHERE telegram_id = $1',
            telegram_id
        )
        await conn.close()
        return trial_used if trial_used is not None else False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ trial —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

async def mark_trial_used(telegram_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª trial"""
    try:
        conn = await get_connection()
        await conn.execute(
            'UPDATE users SET trial_used = TRUE, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = $1',
            telegram_id
        )
        await conn.close()
        logger.info(f"‚úÖ Trial –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ trial: {e}")
        return False

async def update_user_metadata(telegram_id: int, key: str, value):
    """
    –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—é–±—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        conn = await get_connection()
        await conn.execute(
            'UPDATE users SET metadata = jsonb_set(COALESCE(metadata, \'{}\'), $1, $2), updated_at = CURRENT_TIMESTAMP WHERE telegram_id = $3',
            f'{{{key}}}', f'"{value}"', telegram_id
        )
        await conn.close()
        logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {key} = {value}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def get_user_balance(telegram_id: int):
    """–¢–û–ß–ö–ê –í–•–û–î–ê - –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = await get_connection()
        balance = await conn.fetchval(
            'SELECT balance FROM users WHERE telegram_id = $1',
            telegram_id
        )
        await conn.close()
        return balance or 0
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


# üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
async def get_all_users():
    """–¢–û–ß–ö–ê –í–•–û–î–ê - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = await get_connection()
        users = await conn.fetch('SELECT * FROM users')
        await conn.close()
        return users
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def get_users_count():
    """–¢–û–ß–ö–ê –í–•–û–î–ê - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = await get_connection()
        count = await conn.fetchval('SELECT COUNT(*) FROM users')
        await conn.close()
        return count
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0



### –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –õ–Æ–ë–û–ú –ü–†–û–ï–ö–¢–ï ###
# –ü—Ä–∏–º–µ—Ä 1: VPN —Å–µ—Ä–≤–∏—Å
'''
await save_user(
    telegram_id=123456,
    username="vpn_user",
    email="user@mail.com",
    metadata={"vpn_active": True, "subscription_type": "premium"}
)
'''
# –ü—Ä–∏–º–µ—Ä 2: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω
'''
await save_user(
    telegram_id=789012, 
    display_name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    phone_number="+79123456789",
    metadata={"loyalty_level": "gold", "orders_count": 5}
)
'''
# –ü—Ä–∏–º–µ—Ä 3: –§–∏—Ç–Ω–µ—Å –∫–ª—É–±
'''
await save_user(
    telegram_id=345678,
    first_name="–ê–Ω–Ω–∞",
    last_name="–ü–µ—Ç—Ä–æ–≤–∞", 
    metadata={"club_member": True, "trainer": "–ò–≤–∞–Ω", "visits_this_month": 8}
)
'''