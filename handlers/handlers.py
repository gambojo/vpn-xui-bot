from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.state import State, StatesGroup
import logging

from services.registration_service import registration_manager, RegistrationStates
from handlers.action_service import action_service
from handlers.keyboards import (
    get_main_menu, get_profile_menu, get_subs_menu, get_instructions_menu,
    get_payment_methods, get_back_only, get_payment_check, get_confirmation_keyboard
)
from config import (
    WELCOME_MESSAGE, ABOUT_MESSAGE, INSTRUCTIONS_MESSAGE, PROFILE_MESSAGE, SUBS_MESSAGE,
    COLLECT_EMAIL, COLLECT_PHONE, COLLECT_FIRST_NAME, COLLECT_LAST_NAME, COLLECT_PATRONYMIC
)

logger = logging.getLogger(__name__)
router = Router()

# üî¥ –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ConfirmationStates(StatesGroup):
    waiting_for_confirmation = State()

# =============================================
# üè† –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ MENU BUTTON
# =============================================

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: /start
    –ó–ê–ü–£–°–ö: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ /start
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    telegram_id = message.from_user.id
    username = message.from_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    from services.database import save_user
    await save_user(telegram_id, username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await process_registration(message, state)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: /profile
    –ó–ê–ü–£–°–ö: –ö–æ–º–∞–Ω–¥–∞ /profile –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    telegram_id = message.from_user.id

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_user_profile(telegram_id)
    await message.answer(result["message"], reply_markup=get_profile_menu(), parse_mode="HTML")


@router.message(Command("subs"))
async def cmd_subs(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: /subs
    –ó–ê–ü–£–°–ö: –ö–æ–º–∞–Ω–¥–∞ /subs –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ VPN
    """
    await message.answer(
        SUBS_MESSAGE,
        reply_markup=get_subs_menu(),
        parse_mode="HTML"
    )


@router.message(Command("instructions"))
async def cmd_instructions(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: /instructions
    –ó–ê–ü–£–°–ö: –ö–æ–º–∞–Ω–¥–∞ /instructions –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN
    """
    await message.answer(
        INSTRUCTIONS_MESSAGE,
        reply_markup=get_instructions_menu(),
        parse_mode="HTML"
    )


# =============================================
# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò REPLY-–ö–õ–ê–í–ò–ê–¢–£–†
# =============================================

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é + –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@router.message(F.text == "üéÅ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º")
async def handle_free_period(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üéÅ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ê–∫—Ç–∏–≤–∞—Ü–∏—è trial –ø–µ—Ä–∏–æ–¥–∞
    """
    telegram_id = message.from_user.id
    username = message.from_user.username

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_free_trial(telegram_id, username)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(result["message"], reply_markup=get_main_menu(), parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–∑ –ø–∞–º—è—Ç–∏)
    if result.get("qrcode_buffer"):
        photo = BufferedInputFile(result["qrcode_buffer"].getvalue(), filename="qrcode.png")
        await message.answer_photo(photo, caption="üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


@router.message(F.text == "üöÄ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN")
@router.message(F.text == "üõí –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_get_vpn_unified(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è VPN
    """
    telegram_id = message.from_user.id
    username = message.from_user.username

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_get_vpn(telegram_id, username)

    if result["type"] == "confirmation_required":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            existing_days=result.get("existing_days", 0)
        )

        await message.answer(result["message"], reply_markup=get_confirmation_keyboard(), parse_mode="HTML")
        # üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(ConfirmationStates.waiting_for_confirmation)
    elif result["type"] == "payment_required":
        await message.answer(result["message"], reply_markup=get_payment_methods())
        await state.set_state("waiting_for_payment_method")
        await state.update_data(action="create_vpn")
    else:
        await message.answer(result["message"], reply_markup=get_main_menu(), parse_mode="HTML")
        if result.get("qrcode_buffer"):
            photo = BufferedInputFile(result["qrcode_buffer"].getvalue(), filename="qrcode.png")
            await message.answer_photo(photo, caption="üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


@router.message(StateFilter(ConfirmationStates.waiting_for_confirmation))
async def handle_confirmation(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    """
    if message.text == "‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        telegram_id = message.from_user.id
        username = message.from_user.username

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            existing_days = data.get("existing_days", 0)

            logger.info(f"üîç –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–ª—è {telegram_id}, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –¥–Ω–µ–π: {existing_days}")

            # –°–æ–∑–¥–∞–µ–º VPN –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            from services.vpn_service import create_vpn_account
            result = await create_vpn_account(telegram_id)

            if result and result.get("success"):
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                from services.database import update_user_balance
                await update_user_balance(telegram_id, 5)

                success_message = (
                    f"‚úÖ <b>–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
                    f"‚Ä¢ –°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {existing_days} –¥–Ω–µ–π) –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞\n"
                    f"‚Ä¢ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {result['expiry_days']} –¥–Ω–µ–π\n"
                    f"‚Ä¢ ID: {telegram_id}\n"
                    f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: <code>{result['connection_string']}</code>"
                )

                await message.answer(success_message, reply_markup=get_main_menu(), parse_mode="HTML")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
                if result.get("qrcode_buffer"):
                    photo = BufferedInputFile(result["qrcode_buffer"].getvalue(), filename="qrcode.png")
                    await message.answer_photo(photo, caption="üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

                await state.clear()

            else:
                error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                if result and result.get("error"):
                    error_message = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"

                await message.answer(error_message, reply_markup=get_main_menu())
                await state.clear()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=get_main_menu())
            await state.clear()

    elif message.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        await state.clear()
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")


@router.message(F.text == "üì± –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
async def handle_get_connection(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üì± –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    –†–ï–ó–£–õ–¨–¢–ê–¢: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN
    """
    telegram_id = message.from_user.id

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_get_connection(telegram_id)

    await message.answer(result["message"], reply_markup=get_subs_menu(), parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–∑ –ø–∞–º—è—Ç–∏)
    if result.get("qrcode_buffer"):
        photo = BufferedInputFile(result["qrcode_buffer"].getvalue(), filename="qrcode.png")
        await message.answer_photo(photo, caption="üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


@router.message(F.text == "üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
async def handle_status(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ VPN –ø–æ–¥–ø–∏—Å–∫–∏
    """
    telegram_id = message.from_user.id

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_vpn_status(telegram_id)
    await message.answer(result["message"], reply_markup=get_subs_menu(), parse_mode="HTML")


@router.message(F.state == "waiting_for_confirmation")
async def handle_confirmation(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if message.text == "‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        telegram_id = message.from_user.id
        username = message.from_user.username

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é)
        result = await action_service.handle_get_vpn(telegram_id, username)

        if result["type"] == "payment_required":
            await message.answer(result["message"], reply_markup=get_payment_methods())
            await state.set_state("waiting_for_payment_method")
            await state.update_data(action="create_vpn")
        else:
            await message.answer(result["message"], reply_markup=get_main_menu(), parse_mode="HTML")
            if result.get("qrcode_buffer"):
                photo = BufferedInputFile(result["qrcode_buffer"].getvalue(), filename="qrcode.png")
                await message.answer_photo(photo, caption="üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            await state.clear()

    elif message.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        await state.clear()
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")


@router.message(F.text == "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_renew(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    """
    telegram_id = message.from_user.id

    # üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞
    result = await action_service.handle_renew_vpn(telegram_id)

    if result["type"] == "payment_required":
        await message.answer(result["message"], reply_markup=get_payment_methods())
        await state.set_state("waiting_for_payment_method")
        await state.update_data(action="renew_vpn")
    else:
        await message.answer(result["message"], reply_markup=get_main_menu(), parse_mode="HTML")
        if result.get("qrcode_buffer"):
            photo = BufferedInputFile(result["qrcode_buffer"].getvalue(), filename="qrcode.png")
            await message.answer_photo(photo, caption="üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


# =============================================
# üë§ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
# =============================================

@router.message(F.text == "üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ")
async def handle_complete_profile(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    await process_registration(message, state)


@router.message(F.text == "üèÜ –ú–æ–∏ –±–∞–ª–ª—ã")
async def handle_balance(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üèÜ –ú–æ–∏ –±–∞–ª–ª—ã"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    telegram_id = message.from_user.id

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_user_balance(telegram_id)
    await message.answer(result["message"], reply_markup=get_profile_menu(), parse_mode="HTML")


@router.message(F.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def handle_invite(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞
    –†–ï–ó–£–õ–¨–¢–ê–¢: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
    """
    telegram_id = message.from_user.id
    invite_link = f"https://t.me/your_bot?start={telegram_id}"

    await message.answer(
        f"üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞</b>\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{invite_link}</code>\n\n"
        f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n"
        f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 –±–∞–ª–ª–æ–≤\n"
        f"‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 20 –±–∞–ª–ª–æ–≤\n"
        f"‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∞",
        reply_markup=get_profile_menu(),
        parse_mode="HTML"
    )


@router.message(F.text == "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ")
async def handle_about(message: Message):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ"
    –ó–ê–ü–£–°–ö: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û —Å–µ—Ä–≤–∏—Å–µ"
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN —Å–µ—Ä–≤–∏—Å–µ
    """
    await message.answer(ABOUT_MESSAGE, reply_markup=get_main_menu(), parse_mode="HTML")


# =============================================
# üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–õ–ê–¢–´
# =============================================

@router.message(F.state == "waiting_for_payment_method")
async def handle_payment_method(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    –ó–ê–ü–£–°–ö: –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É" –∏–ª–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    –†–ï–ó–£–õ–¨–¢–ê–¢: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    """
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    data = await state.get_data()
    action = data.get("action", "create_vpn")

    telegram_id = message.from_user.id
    provider_map = {
        "üí≥ –ÆMoney": "yoomoney",
        "üì± –°–ë–ü": "sbp",
        "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞": "card"
    }

    provider = provider_map.get(message.text)
    if not provider:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
    result = await action_service.handle_create_payment(telegram_id, provider, action)

    if result["type"] == "payment_created":
        await message.answer(result["message"], reply_markup=get_payment_check(), parse_mode="HTML")
        await state.update_data(
            payment_id=result['payment_id'],
            provider=provider,
            action=action
        )
        await state.set_state("waiting_for_payment_confirmation")
    else:
        await message.answer(result["message"], reply_markup=get_payment_methods())


@router.message(F.state == "waiting_for_payment_confirmation")
async def handle_payment_confirmation(message: Message, state: FSMContext):
    """
    üìç –¢–û–ß–ö–ê –í–•–û–î–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    –ó–ê–ü–£–°–ö: –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ª—É–≥–∏
    """
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=get_payment_methods())
        await state.set_state("waiting_for_payment_method")
        return

    if message.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        data = await state.get_data()
        payment_id = data.get("payment_id")
        provider = data.get("provider")
        action = data.get("action")
        telegram_id = message.from_user.id

        # –í–°–Ø –ª–æ–≥–∏–∫–∞ –≤ ActionService
        result = await action_service.handle_check_payment(payment_id, provider, action, telegram_id)
        await message.answer(result["message"], reply_markup=get_main_menu())
        await state.clear()
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")


# =============================================
# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================

async def process_registration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è"""
    telegram_id = message.from_user.id

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ–º—ã—á–∫–∞–º
    registration_manager.configure_fields(
        email=COLLECT_EMAIL,
        phone=COLLECT_PHONE,
        first_name=COLLECT_FIRST_NAME,
        last_name=COLLECT_LAST_NAME,
        patronymic=COLLECT_PATRONYMIC
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    next_field = registration_manager.get_next_field()
    if next_field:
        field_name, next_state = next_field
        question = registration_manager.get_question(field_name)

        await message.answer("üìù –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", reply_markup=get_back_only())
        await message.answer(question)
        await state.set_state(next_state)


# =============================================
# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
# =============================================

@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await _process_registration_field(message, state, "email")


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await _process_registration_field(message, state, "phone")


@router.message(RegistrationStates.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await _process_registration_field(message, state, "first_name")


@router.message(RegistrationStates.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await _process_registration_field(message, state, "last_name")


@router.message(RegistrationStates.waiting_for_patronymic)
async def process_patronymic(message: Message, state: FSMContext):
    await _process_registration_field(message, state, "patronymic")


async def _process_registration_field(message: Message, state: FSMContext, field_name: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return

    value = message.text.strip()

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª–µ
    if not registration_manager.validate_field(field_name, value):
        await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    telegram_id = message.from_user.id
    from services.database import save_user
    await save_user(telegram_id, **{field_name: value})

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    next_field = registration_manager.get_next_field(await state.get_state())
    if next_field:
        next_field_name, next_state = next_field
        question = registration_manager.get_question(next_field_name)
        await message.answer(question)
        await state.set_state(next_state)
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            reply_markup=get_main_menu()
        )
        await state.clear()


# =============================================
# üìã –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ü–û –¢–û–ß–ö–ê–ú –í–•–û–î–ê
# =============================================
"""
üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –¢–û–ß–ï–ö –í–•–û–î–ê:

üìç –ö–û–ú–ê–ù–î–´ MENU BUTTON (—Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É):
‚Ä¢ /start     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /profile   - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç  
‚Ä¢ /subs      - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ /instructions - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é

üìç REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–´ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏):
‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é              - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ üöÄ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN - –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN
‚Ä¢ üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥         - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑ –æ–ø–ª–∞—Ç—ã
‚Ä¢ üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å             - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN
‚Ä¢ üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É         - –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏

üìç –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢:
‚Ä¢ üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ - –°–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üèÜ –ú–æ–∏ –±–∞–ª–ª—ã                 - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤  
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞          - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üìç –°–û–°–¢–û–Ø–ù–ò–Ø FSM:
‚Ä¢ waiting_for_payment_method     - –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
‚Ä¢ waiting_for_payment_confirmation - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ RegistrationStates.*           - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

üîÑ –ü–û–¢–û–ö –î–ê–ù–ù–´–•:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí Handler ‚Üí ActionService ‚Üí Services ‚Üí –ë–∞–∑–∞/API
"""