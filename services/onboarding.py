import logging
from typing import Dict, List, Optional
from aiogram import Bot
from aiogram.types import Message
import asyncio

logger = logging.getLogger(__name__)


class OnboardingService:
    """
    –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –°–ï–†–í–ò–° –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–• –®–ê–ì–û–í
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    """

    def __init__(self, bot: Bot = None):
        self.bot = bot
        self.steps = []  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤

    def configure_steps(self, steps_config: List[Dict]):
        """
        –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –®–ê–ì–û–í

        Args:
            steps_config: [
                {
                    "type": "channel_subscription",
                    "channel": "@my_channel",
                    "message": "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
                    "skip_if_subscribed": True
                },
                {
                    "type": "ad_view",
                    "ad_text": "–†–µ–∫–ª–∞–º–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞...",
                    "duration": 5,
                    "image_url": "https://example.com/ad.jpg"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                },
                {
                    "type": "data_collection",
                    "fields": ["phone", "email"],
                    "message": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
                }
            ]
        """
        self.steps = steps_config
        logger.info(f"‚úÖ Onboarding —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω: {len(steps_config)} —à–∞–≥–æ–≤")

    async def execute_steps(self, user_id: int, message: Message = None) -> Dict:
        """
        –í–´–ü–û–õ–ù–ï–ù–ò–ï –í–°–ï–• –®–ê–ì–û–í ONBOARDING

        Returns:
            {
                "completed": bool,
                "next_action": str,  # "create_vpn", "show_menu", etc.
                "message": str,
                "failed_step": str   # –µ—Å–ª–∏ completed=False
            }
        """
        if not self.steps:
            logger.info("‚ö†Ô∏è Onboarding —à–∞–≥–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return {"completed": True, "next_action": "create_vpn"}

        logger.info(f"üîç –ó–∞–ø—É—Å–∫ onboarding –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        for step in self.steps:
            step_result = await self._execute_single_step(step, user_id, message)

            if not step_result["completed"]:
                logger.info(f"‚è∏Ô∏è Onboarding –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —à–∞–≥–µ: {step['type']}")
                return {
                    "completed": False,
                    "next_action": "wait_onboarding",
                    "message": step_result["message"],
                    "failed_step": step["type"]
                }

        logger.info(f"‚úÖ Onboarding –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return {"completed": True, "next_action": "create_vpn"}

    async def _execute_single_step(self, step: Dict, user_id: int, message: Message) -> Dict:
        """–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–î–ù–û–ì–û –®–ê–ì–ê"""
        step_type = step["type"]

        try:
            if step_type == "channel_subscription":
                return await self._check_channel_subscription(step, user_id)

            elif step_type == "ad_view":
                return await self._show_advertisement(step, user_id, message)

            elif step_type == "data_collection":
                return await self._collect_additional_data(step, user_id, message)

            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞: {step_type}")
                return {"completed": True, "message": "Unknown step"}  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —à–∞–≥–∏

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step_type}: {e}")
            return {"completed": False, "message": f"–û—à–∏–±–∫–∞ —à–∞–≥–∞: {e}"}

    # üé™ –®–ê–ë–õ–û–ù 1: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–ù–ê–õ
    async def _check_channel_subscription(self, step: Dict, user_id: int) -> Dict:
        """–®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª"""
        channel = step["channel"]
        message_text = step.get("message", f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel}")
        skip_if_subscribed = step.get("skip_if_subscribed", True)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if await self._is_user_subscribed(user_id, channel):
                if skip_if_subscribed:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
                    return {"completed": True, "message": "–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω"}
                else:
                    # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return {
                        "completed": False,
                        "message": f"{message_text}\n\n‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
                    }

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            return {
                "completed": False,
                "message": f"{message_text}\n\nüîó –°—Å—ã–ª–∫–∞: https://t.me/{channel.lstrip('@')}\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return {"completed": True, "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _is_user_subscribed(self, user_id: int, channel: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        if not self.bot:
            logger.warning("‚ö†Ô∏è Bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
            return True  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

        try:
            member = await self.bot.get_chat_member(chat_id=channel, user_id=user_id)
            return member.status in ["member", "administrator", "creator"]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
            return False

    # üì∫ –®–ê–ë–õ–û–ù 2: –ü–û–ö–ê–ó –†–ï–ö–õ–ê–ú–´
    async def _show_advertisement(self, step: Dict, user_id: int, message: Message) -> Dict:
        """–®–ê–ì 2: –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        ad_text = step["ad_text"]
        duration = step.get("duration", 5)  # —Å–µ–∫—É–Ω–¥
        image_url = step.get("image_url")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if image_url:
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                await message.answer(
                    f"üì∫ {ad_text}\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {duration} —Å–µ–∫—É–Ω–¥...",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"üì∫ {ad_text}\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {duration} —Å–µ–∫—É–Ω–¥...",
                    parse_mode="HTML"
                )

            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(duration)

            logger.info(f"‚úÖ –†–µ–∫–ª–∞–º–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({duration}—Å–µ–∫)")
            return {"completed": True, "message": "–†–µ–∫–ª–∞–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞"}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã: {e}")
            return {"completed": True, "message": "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã"}

    # üìù –®–ê–ë–õ–û–ù 3: –°–ë–û–† –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –î–ê–ù–ù–´–•
    async def _collect_additional_data(self, step: Dict, user_id: int, message: Message) -> Dict:
        """–®–ê–ì 3: –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        fields = step.get("fields", [])
        message_text = step.get("message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å
            from services.database import get_user
            user = await get_user(user_id)

            missing_fields = []
            for field in fields:
                if field == "email" and (not user or not user.get('email')):
                    missing_fields.append("email")
                elif field == "phone" and (not user or not user.get('phone_number')):
                    missing_fields.append("—Ç–µ–ª–µ—Ñ–æ–Ω")
                elif field == "name" and (not user or not user.get('first_name')):
                    missing_fields.append("–∏–º—è")

            if not missing_fields:
                logger.info(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return {"completed": True, "message": "–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã"}

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
            fields_text = ", ".join(missing_fields)
            return {
                "completed": False,
                "message": f"{message_text}\n\nüìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: {fields_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"completed": True, "message": "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
onboarding_service = OnboardingService()
